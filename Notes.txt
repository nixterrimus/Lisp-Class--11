Data types:
  Numbers
  Strings
  Symbols (words/variables)
  
  single quote means do not evaluate any further - write as is
  
  `(1 2 3) Evaluates as a list
  
  list function
  (list 1 2 3)
  
  cons
    first part: car
    rest: cdr
    
  cons = append to head
  
  (car ()) = remove head
  (cdr (1 2 3)) = remove tail
  
  boolean operate = predicate
  
  predicate returns true or false
  
  (listp `(1 2 3))
  
  null is a predicate empty
  
  not negates
  
  CL-USER 5 > (not ())
  T
  
  CL-USER 4 > (if nil 1 3)
  3

  CL-USER 5 > (if 1 2 3)
  2
  
  ----
  
  (do ((i start update))
      ((conditional))
  )
  
  
  (dolist (var lst)
    `iterating across lst with var as current
  )
  
  (defun display-list (x)
                    (dolist (cur x)
                      (format t "~A~%" cur)
  )
  )
  
  (length `(a b c d))
  
  
  Functions as objects
  
  #'+
  
  (apply #'+ `(1 2 3))
  
  (apply #'max `(1 3 4 5 6))
  
  (funcall #'+ 1 2 3 4)
  
  ((lambda (x y) (+ x y )) 2 3)



  Chapter 3 Lists
  
  atom vs. consp
  
  (defun my-atom (x)
    (not (consp x))
  )
  
  (eql 'a 'a)
  
  CL-USER 15 : 2 > (equal `(a b c) `(y u p))
  NIL
  
  
  Building lists
  (setf x `(a b c))
  (list `a `b `c)
  
  (setf y x) ;Share the same memory space
  
  (setf y (copy-list x))
  
  
  (eql x y) ; Does pointer comparison
  
  
  (defun my-copy-list (lst)
    (if (null lst)
      lst
      (append (car lst) (my-copy-list (cdr lst)))
    )
  )
  
  ; 3.6 Access
  
  (first `(a b c))
  (nth 0 `(a b c))
  (car `(a b c))
  (cdr `(a b c))
  
  (nthcdr 1 `(a b))
  ;Returns everything after speicified position
  
  
  
  ; Mapping Functions
  
  (mapcar fun `(a b c d e))
  ; Does fun to each element
  
  (defun my-mapcar (fn lst)
    (let ((result nil))
      (dolist (elt list)
        (setf result (append result (funcall fn elt)))
      )
      result
    )
  )
  
  (mapcar #` `(1 2 3))
  
  (mapcar #`+ `( 1 2 3) `(10 20 30))
  
  ; 3.10 Sets
  (member `b `(a b c))
  
  (member "a" `("a" "b" "c") :test #`equal)
  
  (member 'a '((a b) (c d)) :key #`car)
  
  (member-if #`odd-p `(2 3 4 5))
  
  (defun my-member (fn lst)
    (let ((result nil))
      (dolist (elt lst)
        (if (funcall fn elt))
          (setf result (append result elt))
        )
      result
    )
  )
  
  ;(sort (list 9 3 5 4 8 7 1 2 0 6) #'>)
  
  ----
  
  listp vs. consp
  
  (intersection `(a b c) `(c d e)) ;Can also take a key and test keyword argument
  (set-difference )
  (subset?)
  
  
  ; Sequence
  
  (reverse `(a b c))
  
  (subseq `(a b c d) 1 3) ;Like substring method
      
  (sort `())
  
  (subst `z `a `(a b c a b c))
  
  (read ) ;read user input
      
  (+ 1 (random 100))
      