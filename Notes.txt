Data types:
  Numbers
  Strings
  Symbols (words/variables)
  
single quote means do not evaluate any further - write as is

`(1 2 3) Evaluates as a list

list function
(list 1 2 3)

cons
  first part: car
  rest: cdr
  
cons = append to head

(car ()) = remove head
(cdr (1 2 3)) = remove tail

boolean operate = predicate

predicate returns true or false

(listp `(1 2 3))

null is a predicate empty

not negates

CL-USER 5 > (not ())
T

CL-USER 4 > (if nil 1 3)
3

CL-USER 5 > (if 1 2 3)
2

----

(do ((i start update))
    ((conditional))
)


(dolist (var lst)
  `iterating across lst with var as current
)

(defun display-list (x)
                  (dolist (cur x)
                    (format t "~A~%" cur)
)
)

(length `(a b c d))


Functions as objects

#'+

(apply #'+ `(1 2 3))

(apply #'max `(1 3 4 5 6))

(funcall #'+ 1 2 3 4)

((lambda (x y) (+ x y )) 2 3)



Chapter 3 Lists

atom vs. consp

(defun my-atom (x)
  (not (consp x))
)

(eql 'a 'a)

CL-USER 15 : 2 > (equal `(a b c) `(y u p))
NIL


Building lists
(setf x `(a b c))
(list `a `b `c)

(setf y x) ;Share the same memory space

(setf y (copy-list x))


(eql x y) ; Does pointer comparison


(defun my-copy-list (lst)
  (if (null lst)
    lst
    (append (car lst) (my-copy-list (cdr lst)))
  )
)

; 3.6 Access

(first `(a b c))
(nth 0 `(a b c))
(car `(a b c))
(cdr `(a b c))

(nthcdr 1 `(a b))
;Returns everything after speicified position



; Mapping Functions

(mapcar fun `(a b c d e))
; Does fun to each element

(defun my-mapcar (fn lst)
  (let ((result nil))
    (dolist (elt list)
      (setf result (append result (funcall fn elt)))
    )
    result
  )
)

(mapcar #` `(1 2 3))

(mapcar #`+ `( 1 2 3) `(10 20 30))

; 3.10 Sets
(member `b `(a b c))

(member "a" `("a" "b" "c") :test #`equal)

(member 'a '((a b) (c d)) :key #`car)

(member-if #`odd-p `(2 3 4 5))

(defun my-member (fn lst)
  (let ((result nil))
    (dolist (elt lst)
      (if (funcall fn elt))
        (setf result (append result elt))
      )
    result
  )
)

;(sort (list 9 3 5 4 8 7 1 2 0 6) #'>)

----

listp vs. consp

(intersection `(a b c) `(c d e)) ;Can also take a key and test keyword argument
(set-difference )
(subset?)


; Sequence

(reverse `(a b c))

(subseq `(a b c d) 1 3) ;Like substring method
    
(sort `())

(subst `z `a `(a b c a b c))

(read ) ;read user input
    
(+ 1 (random 100))

---

24. Some Useful List Functions

These functions all manipulate lists.

 > (append '(1 2 3) '(4 5 6))    ;concatenate lists
(1 2 3 4 5 6)
> (reverse '(1 2 3))            ;reverse the elements of a list
(3 2 1)
> (member 'a '(b d a c))        ;set membership -- returns the first tail
(A C)                           ;whose car is the desired element
> (find 'a '(b d a c))          ;another way to do set membership
A
> (find '(a b) '((a d) (a d e) (a b d e) ()) :test #'subsetp)
(A B D E)                       ;find is more flexible though
> (subsetp '(a b) '(a d e))     ;set containment
NIL
> (intersection '(a b c) '(b))  ;set intersection
(B)
> (union '(a) '(b))             ;set union
(A B)
> (set-difference '(a b) '(a))  ;set difference
(B)
Subsetp, intersection, union, and set-difference all assume that each argument contains no duplicate elements -- (subsetp '(a a) '(a b b)) is allowed to fail, for example.

Find, subsetp, intersection, union, and set-difference can all take a :test keyword argument; by default, they all use eql.

from: http://www.n-a-n-o.com/lisp/cmucl-tutorials/LISP-tutorial-24.html

----

(substitute new old lst)

(cons 'a 'b)

; Chapter 4 Special Data structures
; arrays

; Initialize a 2x3 array
(make-array '(2 3) )
(setf *arr* (make-array '(2 3) :initial-element 0))

(aref *arr* 0 0)

; Set 0 0 to 1


(defun array-make ()
  
)


(loop for j from 0 to 50 by 10 do 
(print j)
(collect (loop for i from 0 to 9 collect i))

)

(setf *arr* (make-array '(5 6) :initial-element 0))

(loop for j from 0 to (- (first (array-dimensions *arr* ) ) 1) do
  (loop for k from 0 to (- (second (array-dimensions *arr* )) 1) do
    (setf (aref *arr* j k) (+ j k))
    
  )
)

*arr*

(vector 'a 'b 'c)

; Strings

#\a ; a character

(concatenate "asd" "Asda")

; Returns the result rather than printing it
(format nil "sdfsdf")

; Hash tables

;Keyword test to use change how elements are compared
(setf *hash* (make-hash-table :test #`equal))

(gethash 'key1 *hash*)

(setf (gethash 'key1 *hash*) 'value1)

(remhash 'key1 *hash*) ; Removes an element from the hash

(maphash #'(lambda(k v) (format t "~a = ~a~%" k v)) *hash*)

(defun hash-to-list (hashtable)
  "Return a list that represent the HASHTABLE."
  (let ((mylist nil))
    (maphash (lambda (kk vv) (setq mylist (cons (list kk vv) mylist))) hashtable)
    mylist
  )
)


; Chapter 5 - Control

(progn (print "a") (print "b"))

(block one (format t "a") (return-from name "b"))

(block nil (print "a") (return "a"))

(values 1 2 3 4 5)

(multiple-value-bind (x y) (values 1 2) x y)